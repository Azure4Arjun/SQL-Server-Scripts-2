SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('dbo.usp_DailyChecker') IS NULL
  EXEC ('CREATE PROCEDURE dbo.usp_DailyChecker AS RETURN 0;');
GO
ALTER PROC [dbo].[usp_DailyChecker] 
@ResultHTML INT = 0
AS


/*--------------------------------------------------------------------------
Written by Yunus UYANIK AND Buğrahan BOL(%4), yunusuyanik.com
Version 1.1
Date : 02.01.2020
(c) 2020, yunusuyanik.com. All rights reserved.

For more scripts and sample code, check out 
www.yunusuyanik.com - www.silikonakademi.com

MIT License

Copyright (c) 2020 YunusUYANIK

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
---------------------------------------------------------------------------*/



SET NOCOUNT ON;

IF OBJECT_ID('tempdb..##uns_DailyChecker') IS NOT NULL DROP TABLE ##uns_DailyChecker;
CREATE TABLE ##uns_DailyChecker 
(Id int identity(1,1),
Priority int,
CheckGroup VARCHAR(250),
CheckSubGroup VARCHAR(1000),
DatabaseName VARCHAR(250),
Details VARCHAR(max),
Details2 VARCHAR(max),
Comment VARCHAR(max),
Type TINYINT,--0 info ,1 success, 2 warning 3 danger
DefinitionTSQL NVARCHAR(MAX),
CreateTSQL NVARCHAR(MAX),
DropTSQL NVARCHAR(MAX)
)

DECLARE @sqlrestarttime VARCHAR(100) = (SELECT CONVERT(VARCHAR(100),create_date,120) FROM sys.databases where database_id=2)

INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,DatabaseName,Details,Details2)
VALUES (-1,'Daily Checker',NULL,NULL,CONVERT(VARCHAR(100),GETDATE(),120)+' tarihinde çalıştırılmıştır.','Last SQL Restart : '+@sqlrestarttime)



/***************************************************************
****************** Server Config Info
***************************************************************/


Print 'Server Info processing...'


CREATE TABLE #uns_DefaultServerConfig (name varchar(500),value int)

INSERT INTO #uns_DefaultServerConfig (name,value) VALUES
('access check cache bucket count', 0),
('access check cache quota', 0),
('ad hoc distributed queries', 0),
('affinity I/O mask', 0),
('affinity64 I/O mask', 0),
('affinity mask', 0),
('affinity64 mask', 0),
('allow updates', 0),
('backup compression default', 0),
('blocked process threshold', 0),
('c2 audit mode', 0),
('clr enabled', 0),
('common criteria compliance enabled', 0),
('contained database authentication', 0),
('cost threshold for parallelism', 5),
('cross db ownership chaining', 0),
('cursor threshold', -1),
('Database Mail XPs', 0),
('default full-text language', 1033),
('default language', 0),
('default trace enabled', 1),
('disallow results from triggers', 0),
('EKM provider enabled', 0),
('filestream_access_level', 0),
('fill factor', 0),
('ft crawl bandwidth (max)', 100),
('ft crawl bandwidth (min)', 0),
('ft notify bandwidth (max)', 100),
('ft notify bandwidth (min)', 0),
('index create memory', 0),
('in-doubt xact resolution', 0),
('lightweight pooling', 0),
('locks', 0),
('max degree of parallelism', 0),
('max full-text crawl range', 4),
('max server memory', 2147483647),
('max text repl size', 65536),
('max worker threads', 0),
('media retention', 0),
('min memory per query', 1024),
('min server memory', 0),
('nested triggers', 1),
('network packet size', 4096),
('Ole Automation Procedures', 0),
('open objects', 0),
('optimize for ad hoc workloads', 0),
('PH_timeout', 60),
('precompute rank', 0),
('priority boost', 0),
('query governor cost limit', 0),
('query wait', -1),
('recovery interval', 0),
('remote access', 1),
('remote admin connections', 0),
('remote login timeout', 10),
('remote proc trans', 0),
('remote query timeout', 600),
('Replication XPs Option', 0),
('scan for startup procs', 0),
('server trigger recursion', 1),
('set working set size', 0),
('show advanced options', 0),
('SMO and DMO XPs', 1),
('transform noise words', 0),
('two digit year cutoff', 2049),
('user connections', 0),
('user options', 0),
('xp_cmdshell', 0)


INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,Details,Details2,Type)
SELECT  0, 'Server Info','ComputerName',CONVERT(VARCHAR(100),SERVERPROPERTY('MachineName')),NULL,0
UNION
SELECT  1, 'Server Info','InstanceName',CONVERT(VARCHAR(100),SERVERPROPERTY('ServerName')),NULL,0
UNION
SELECT  2, 'Server Info','Edition',CONVERT(VARCHAR(100),SERVERPROPERTY('Edition')),NULL,0
UNION
SELECT  3, 'Server Info','ProductVersion',CONVERT(VARCHAR(100),SERVERPROPERTY('ProductVersion')),NULL,0
UNION
SELECT  4, 'Server Info','ProductLevel',CONVERT(VARCHAR(100),SERVERPROPERTY('ProductLevel')),NULL,0
UNION
SELECT 
	Pritority = 11,
	CheckGroup = 'Server Configuration',
	CheckSubGroup = 'Info',
	Details = name +' : '+CONVERT(VARCHAR(100),value_in_use),
	Details2 = NULL,
	Type = 0
FROM sys.configurations WITH (NOLOCK)
WHERE name IN (
	'max server memory (MB)',
	'fill factor (%)',
	'optimize for ad hoc workloads',
	'remote admin connections',
	'cost threshold for parallelism',
	'backup compression default',
	'automatic soft-NUMA disabled',
	'max degree of parallelism',
	'xp_cmdshell')
UNION
SELECT 
	Pritority = 12,
	CheckGroup = 'Server Configuration',
	CheckSubGroup = 'Non-Default',
	Details = c.name +' : '+CONVERT(VARCHAR(100),value_in_use),
	Details2 = 'The config default value is : '+CONVERT(varchar(100),uc.value),
	Type = 2
FROM sys.configurations c WITH (NOLOCK)
JOIN #uns_DefaultServerConfig uc ON c.name=uc.name
WHERE c.value!=uc.value
	AND c.name NOT IN (
	'max server memory (MB)',
	'fill factor (%)',
	'optimize for ad hoc workloads',
	'remote admin connections',
	'cost threshold for parallelism',
	'backup compression default',
	'automatic soft-NUMA disabled',
	'max degree of parallelism',
	'xp_cmdshell')



INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,DatabaseName,Details,Type)
SELECT  
		Priority = 13, 
		CheckGroup = 'Group Policy Info',
		CheckSubGroup = 'Lock Pages in memory',
		DatabaseName = NULL,
		Details = sql_memory_model_desc,
		Type = CASE WHEN sql_memory_model_desc='LOCK_PAGES' THEN 1 ELSE 2 END
FROM sys.dm_os_sys_info WITH (NOLOCK)


IF 
(SELECT 1 FROM sys.all_objects o WITH (NOLOCK)
INNER JOIN sys.all_columns c WITH (NOLOCK) ON o.object_id = c.object_id 
WHERE o.name = 'dm_server_services' AND c.name = 'instant_file_initialization_enabled' ) IS NOT NULL 
BEGIN
	DECLARE @tsql NVARCHAR(MAX) ='
	INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,DatabaseName,Details,Details2,Comment,Type)
	SELECT 
		Priority = 13, 
		CheckGroup = ''Group Policy Info'',
		CheckSubGroup = ''IFI'',
		DatabaseName = NULL,
		Details = 
			CASE 
				WHEN instant_file_initialization_enabled =''Y'' THEN QUOTENAME(service_account)+'' service account has ''''Perform volume maintenance tasks'''' policy.''
				WHEN instant_file_initialization_enabled =''N'' THEN QUOTENAME(service_account)+'' service account does not have ''''Perform volume maintenance tasks'''' policy.''
			END,
		Details2 = NULL,
		Comment = NULL,
		Type = CASE WHEN instant_file_initialization_enabled=''Y'' THEN 1 ELSE 2 END
	FROM sys.dm_server_services WITH (NOLOCK)
	WHERE filename LIKE ''%sqlservr.exe%''
	OPTION (RECOMPILE); '
	EXEC sp_executesql @tsql;
END


Print 'It is done.'





/***************************************************************
****************** Database Configuration
***************************************************************/

Print 'Database Configuration processing...'

DECLARE @tempdbfilecount int
DECLARE @cpucount int
DECLARE @sizecontrol int 

SELECT @cpucount=cpu_count FROM sys.dm_os_sys_info

SELECT @tempdbfilecount=COUNT(1) ,
	@sizecontrol=
	CASE 
	WHEN (SELECT TOP 1 size FROM sys.master_files WITH (NOLOCK) WHERE database_id=2 AND type=0 ) = SUM(s.size)/@tempdbfilecount
	THEN 1 
	ELSE 0 END
FROM sys.master_files s WITH (NOLOCK)
WHERE database_id=2 AND type=0

INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,DatabaseName,Details,Details2,Type)
SELECT 
	Priority = 21,
	CheckGroup = 'Database Configuration',
	CheckSubGroup = 'tempdb Configuration',
	DatabaseName = 'tempdb',
	Details=
	CASE
		WHEN @cpucount>=8 AND @tempdbfilecount=8 AND @sizecontrol=1			
			THEN 'Data file count : '+CONVERT(varchar(10),@tempdbfilecount)+' and size of files are same.'
		WHEN @cpucount>=8 AND @tempdbfilecount=8 AND @sizecontrol=0			
			THEN 'tempdb file(s) size are not same'
		WHEN @cpucount>=8 AND @tempdbfilecount<>8 AND @sizecontrol=1		
			THEN 'tempdb file count is not correct it is : '+CONVERT(varchar(10),@tempdbfilecount)
		WHEN @cpucount>=8 AND @tempdbfilecount<>8 AND @sizecontrol=0		
			THEN '#tempdb configuration is not true. Check Required!'
		WHEN @cpucount<8 AND @tempdbfilecount=@cpucount AND @sizecontrol=1
			THEN '#tempdb configuration is correct.'
		WHEN @cpucount<8 AND @tempdbfilecount=@cpucount AND @sizecontrol=0
			THEN '#tempdb configuration is not true. Check Required!'
		WHEN @cpucount<8 AND @tempdbfilecount!=@cpucount AND @sizecontrol=1
			THEN '#tempdb configuration is not true. Check Required!'
		WHEN @cpucount<8 AND @tempdbfilecount!=@cpucount AND @sizecontrol=0
			THEN '#tempdb configuration is not true. Check Required!'
	ELSE '#tempdb control fail' END,
	Details2 = NULL,
	Type = CASE WHEN @cpucount>=8 AND @tempdbfilecount=8 and @sizecontrol=1 THEN 1 ELSE 3 END 
UNION
SELECT
	Priority = 22,
	CheckGroup = 'Database Configuration',
	CheckSubGroup = 'User Databases Configuration',
	DatabaseName = name,
	Details= 
		'is_auto_close_on : '+CONVERT(varchar(10),is_auto_close_on)+',
		is_auto_shrink_on : '+CONVERT(varchar(10),is_auto_shrink_on)+',
		is_auto_create_stats_on : '+CONVERT(varchar(10),is_auto_create_stats_on)+',
		is_auto_update_stats_on : '+CONVERT(varchar(10),is_auto_update_stats_on)+',
		compatibility_level : '+CONVERT(varchar(10),compatibility_level)+',
		Recovery Model : '+recovery_model_desc,
	Details2 = NULL,
	Type = 0
FROM sys.databases WITH (NOLOCK)
WHERE database_id>4


Print 'Auto-Growth cehck processing...'

;WITH cte_AutoGrowt AS (
	SELECT d.name as database_name,
		CASE
			WHEN mf.is_percent_growth=0 AND (mf.growth*8/1024)%64!=0 AND (mf.growth*8/1024)>64 AND mf.growth!=0
				THEN 'Auto-Growth is NOT multiple of 64MB '
			WHEN mf.is_percent_growth=0 AND (mf.growth*8/1024)<64  AND mf.growth!=0
				THEN 'Auto-Growth is set below 64MB '
			WHEN mf.is_percent_growth=1
				THEN 'Auto-Growth is set that type of percent '
			WHEN mf.growth=0
				THEN 'Auto-Growth is disable '
			ELSE NULL END AS details,
		CASE
			WHEN mf.is_percent_growth=0 THEN (mf.growth*8/1024) ELSE mf.growth END AS growth
	FROM sys.master_files mf WITH (NOLOCK)
	JOIN sys.databases d WITH (NOLOCK) on mf.database_id=d.database_id
	WHERE d.state=0 AND mf.type IN (0,1))
INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,DatabaseName,Details,Details2,Comment,Type)
SELECT  
	Priority = 23, 
	CheckGroup = 'Auto-Growth',
	CheckSubGroup = 'Possibly Warnings',
	DatabaseName = database_name,
	Details = details+ '('+CONVERT(VARCHAR(10),growth)+').',
	Details2 = NULL,
	Comment = NULL,
	Type = 2 
FROM cte_AutoGrowt WITH (NOLOCK)
WHERE details IS NOT NULL


Print 'VLF count check operation processing...'

IF OBJECT_ID('tempdb..#VLFInfo') IS NOT NULL
	DROP TABLE #VLFInfo;
IF OBJECT_ID('tempdb..#VLFCountResults') IS NOT NULL
	DROP TABLE #VLFCountResults;
CREATE TABLE #VLFInfo (RecoveryUnitID int, FileID  int,
					   FileSize bigint, StartOffset bigint,
					   FSeqNo      bigint, [Status]    bigint,
					   Parity      bigint, CreateLSN   numeric(38));
	 
CREATE TABLE #VLFCountResults(DatabaseName sysname, VLFCount int);
	 
EXEC sp_MSforeachdb N'Use [?]; 

				INSERT INTO #VLFInfo 
				EXEC sp_executesql N''DBCC LOGINFO([?])''; 
	 
				INSERT INTO #VLFCountResults 
				SELECT DB_NAME(), COUNT(*) 
				FROM #VLFInfo; 

				TRUNCATE TABLE #VLFInfo;'
	 

INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,DatabaseName,Details,Details2,Type)
SELECT 
	Priority = 24, 
	CheckGroup = 'Virtual Log File',
	CheckSubGroup = 'VLF count info',
	DatabaseName,
	Details = 'VLF Count : '+ CONVERT(VARCHAR(100),VLFCount),
	Details2 = NULL,
	Type = CASE WHEN VLFCount>1000 THEN 3 ELSE 1 END
FROM #VLFCountResults 
ORDER BY DatabaseName

Print 'It is done.'








/***************************************************************
****************** SQL Server Performance (CPU & Memory)
***************************************************************/


Print 'SQL Server Performance processing...'

Print 'Memory information check processing...'

INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,DatabaseName,Details,Details2,Type)
SELECT 
	Priority = 31, 
	CheckGroup = 'Memory',
	CheckSubGroup = 'SQL Server Memory',
	DatabaseName = NULL,
	Details = 'SQL Server Memory Usage (MB) : '+CONVERT(VARCHAR(100),(physical_memory_in_use_kb/1024))+' ,Memory Utilizastion (%) : '+CONVERT(VARCHAR(100),memory_utilization_percentage),
	Details2 = 'Lock Pages (MB) : '+CONVERT(VARCHAR(100),(locked_page_allocations_kb/1024)),
	Type = 0
FROM sys.dm_os_process_memory WITH (NOLOCK) 
UNION ALL

SELECT 
	Priority = 32, 
	CheckGroup = 'Memory',
	CheckSubGroup = 'OS Memory Performance',
	DatabaseName = NULL,
	Details = 'Physical Memory (MB) : '+CONVERT(VARCHAR(100),(total_physical_memory_kb/1024)),
	Details2 = 'system_memory_state_desc : '+system_memory_state_desc,
	Type = 0
FROM sys.dm_os_sys_memory WITH (NOLOCK) 



IF OBJECT_ID('tempdb..#temp_Scheduler') IS NOT NULL
	DROP TABLE #temp_Scheduler;
SELECT 
	AVG(current_tasks_count) current_tasks_count, 
	AVG(work_queue_count) work_queue_count,
	AVG(runnable_tasks_count) runnable_tasks_count,
	AVG(pending_disk_io_count) pending_disk_io_count
INTO #temp_Scheduler
FROM sys.dm_os_schedulers WITH (NOLOCK)
WHERE scheduler_id < 255

INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,DatabaseName,Details,Type)
SELECT 
	Priority = 33, 
	CheckGroup = 'Worker Info',
	CheckSubGroup = 'CPU or Disk Performance',
	DatabaseName = NULL,
	Details =  'runnable_tasks_count : '+CONVERT(VARCHAR(100),[runnable_tasks_count])+', pending_disk_io_count : '+CONVERT(VARCHAR(100),[pending_disk_io_count])+', current_tasks_count : '+CONVERT(VARCHAR(100),[current_tasks_count])+', work_queue_count : '+CONVERT(VARCHAR(100),[work_queue_count]),
	Type = CASE 
		WHEN (runnable_tasks_count>3 OR pending_disk_io_count>3) 
		THEN 3 ELSE 0 END
FROM #temp_Scheduler



Print 'Disk operation processing...'

;WITH cte_DiskInfo
AS (
	SELECT 
		tab.volume_mount_point,
		tab.total_bytes_gb,
		tab.available_bytes_gb,
		tab.free_size_percent,
		ReadLatency = CASE WHEN num_of_reads = 0 THEN 0 ELSE (io_stall_read_ms/num_of_reads) END,
		WriteLatency = CASE WHEN num_of_writes = 0 THEN 0 ELSE (io_stall_write_ms/num_of_writes) END,
		Latency = CASE WHEN (num_of_reads = 0 AND num_of_writes = 0) THEN 0 ELSE (io_stall/(num_of_reads + num_of_writes)) END
	FROM (
			SELECT 
				SUM(num_of_reads) AS num_of_reads,
				SUM(io_stall_read_ms) AS io_stall_read_ms, 
				SUM(num_of_writes) AS num_of_writes,
				SUM(io_stall_write_ms) AS io_stall_write_ms, 
				SUM(num_of_bytes_read) AS num_of_bytes_read,
				SUM(num_of_bytes_written) AS num_of_bytes_written, 
				SUM(io_stall) AS io_stall, 
				MAX(vs.volume_mount_point) as volume_mount_point,
				MAX(vs.total_bytes)/1024/1024/1024 as total_bytes_gb,
				MAX(vs.available_bytes)/1024/1024/1024 as available_bytes_gb,
				CAST(MAX(vs.available_bytes) * 100.0 / MAX(vs.total_bytes) AS DECIMAL(5, 2)) as free_size_percent
			FROM sys.dm_io_virtual_file_stats(NULL, NULL) AS vfs
				INNER JOIN sys.master_files AS mf WITH (NOLOCK)
				ON vfs.database_id = mf.database_id AND vfs.file_id = mf.file_id
				CROSS APPLY sys.dm_os_volume_stats(mf.database_id, mf.[file_id]) AS vs 
				GROUP BY vs.volume_mount_point
		) AS tab
)
INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,Details,Type)
SELECT 
	DISTINCT 
	Priority = 34, 
	CheckGroup = 'Disk Size',
	CheckSubGroup = 'Disk Letter : '+volume_mount_point,
	Details = 'Size (GB) : '+CONVERT(VARCHAR(100),total_bytes_gb)+', Free Size (GB) : '+CONVERT(VARCHAR(100),available_bytes_gb)+
	' (%'+CONVERT(VARCHAR(10),free_size_percent)+')',
	Type = CASE WHEN free_size_percent<5 THEN 3 WHEN free_size_percent BETWEEN 5 AND 20 THEN 2 WHEN free_size_percent>20 THEN 1 ELSE NULL END
FROM cte_DiskInfo
UNION
SELECT 
	DISTINCT 
	Priority = 35, 
	CheckGroup = 'Disk Latency',
	CheckSubGroup = 'Disk Letter : '+volume_mount_point,
	Details = 'ReadLatency : '+CONVERT(VARCHAR(100),ReadLatency)+' - WriteLatency : '+CONVERT(VARCHAR(100),WriteLatency)+' - Latency : '+CONVERT(VARCHAR(100),Latency),
	Type = CASE WHEN Latency>100 THEN 3 WHEN Latency BETWEEN 50 AND 100 THEN 2 ELSE 0 END
FROM cte_DiskInfo


-- This is Paul White Script
;WITH [Waits] AS
    (SELECT
        [wait_type],
        [wait_time_ms] / 1000.0 AS [WaitS],
        ([wait_time_ms] - [signal_wait_time_ms]) / 1000.0 AS [ResourceS],
        [signal_wait_time_ms] / 1000.0 AS [SignalS],
        [waiting_tasks_count] AS [WaitCount],
        100.0 * [wait_time_ms] / SUM ([wait_time_ms]) OVER() AS [Percentage],
        ROW_NUMBER() OVER(ORDER BY [wait_time_ms] DESC) AS [RowNum]
    FROM sys.dm_os_wait_stats WITH (NOLOCK)
    WHERE [wait_type] NOT IN (
        -- These wait types are almost 100% never a problem and so they are
        -- filtered out to avoid them skewing the results. Click on the URL
        -- for more information.
        N'BROKER_EVENTHANDLER', -- https://www.sqlskills.com/help/waits/BROKER_EVENTHANDLER
        N'BROKER_RECEIVE_WAITFOR', -- https://www.sqlskills.com/help/waits/BROKER_RECEIVE_WAITFOR
        N'BROKER_TASK_STOP', -- https://www.sqlskills.com/help/waits/BROKER_TASK_STOP
        N'BROKER_TO_FLUSH', -- https://www.sqlskills.com/help/waits/BROKER_TO_FLUSH
        N'BROKER_TRANSMITTER', -- https://www.sqlskills.com/help/waits/BROKER_TRANSMITTER
        N'CHECKPOINT_QUEUE', -- https://www.sqlskills.com/help/waits/CHECKPOINT_QUEUE
        N'CHKPT', -- https://www.sqlskills.com/help/waits/CHKPT
        N'CLR_AUTO_EVENT', -- https://www.sqlskills.com/help/waits/CLR_AUTO_EVENT
        N'CLR_MANUAL_EVENT', -- https://www.sqlskills.com/help/waits/CLR_MANUAL_EVENT
        N'CLR_SEMAPHORE', -- https://www.sqlskills.com/help/waits/CLR_SEMAPHORE
        N'CXCONSUMER', -- https://www.sqlskills.com/help/waits/CXCONSUMER
 
        -- Maybe comment these four out if you have mirroring issues
        N'DBMIRROR_DBM_EVENT', -- https://www.sqlskills.com/help/waits/DBMIRROR_DBM_EVENT
        N'DBMIRROR_EVENTS_QUEUE', -- https://www.sqlskills.com/help/waits/DBMIRROR_EVENTS_QUEUE
        N'DBMIRROR_WORKER_QUEUE', -- https://www.sqlskills.com/help/waits/DBMIRROR_WORKER_QUEUE
        N'DBMIRRORING_CMD', -- https://www.sqlskills.com/help/waits/DBMIRRORING_CMD
 
        N'DIRTY_PAGE_POLL', -- https://www.sqlskills.com/help/waits/DIRTY_PAGE_POLL
        N'DISPATCHER_QUEUE_SEMAPHORE', -- https://www.sqlskills.com/help/waits/DISPATCHER_QUEUE_SEMAPHORE
        N'EXECSYNC', -- https://www.sqlskills.com/help/waits/EXECSYNC
        N'FSAGENT', -- https://www.sqlskills.com/help/waits/FSAGENT
        N'FT_IFTS_SCHEDULER_IDLE_WAIT', -- https://www.sqlskills.com/help/waits/FT_IFTS_SCHEDULER_IDLE_WAIT
        N'FT_IFTSHC_MUTEX', -- https://www.sqlskills.com/help/waits/FT_IFTSHC_MUTEX
 
        -- Maybe comment these six out if you have AG issues
        N'HADR_CLUSAPI_CALL', -- https://www.sqlskills.com/help/waits/HADR_CLUSAPI_CALL
        N'HADR_FILESTREAM_IOMGR_IOCOMPLETION', -- https://www.sqlskills.com/help/waits/HADR_FILESTREAM_IOMGR_IOCOMPLETION
        N'HADR_LOGCAPTURE_WAIT', -- https://www.sqlskills.com/help/waits/HADR_LOGCAPTURE_WAIT
        N'HADR_NOTIFICATION_DEQUEUE', -- https://www.sqlskills.com/help/waits/HADR_NOTIFICATION_DEQUEUE
        N'HADR_TIMER_TASK', -- https://www.sqlskills.com/help/waits/HADR_TIMER_TASK
        N'HADR_WORK_QUEUE', -- https://www.sqlskills.com/help/waits/HADR_WORK_QUEUE
 
        N'KSOURCE_WAKEUP', -- https://www.sqlskills.com/help/waits/KSOURCE_WAKEUP
        N'LAZYWRITER_SLEEP', -- https://www.sqlskills.com/help/waits/LAZYWRITER_SLEEP
        N'LOGMGR_QUEUE', -- https://www.sqlskills.com/help/waits/LOGMGR_QUEUE
        N'MEMORY_ALLOCATION_EXT', -- https://www.sqlskills.com/help/waits/MEMORY_ALLOCATION_EXT
        N'ONDEMAND_TASK_QUEUE', -- https://www.sqlskills.com/help/waits/ONDEMAND_TASK_QUEUE
        N'PARALLEL_REDO_DRAIN_WORKER', -- https://www.sqlskills.com/help/waits/PARALLEL_REDO_DRAIN_WORKER
        N'PARALLEL_REDO_LOG_CACHE', -- https://www.sqlskills.com/help/waits/PARALLEL_REDO_LOG_CACHE
        N'PARALLEL_REDO_TRAN_LIST', -- https://www.sqlskills.com/help/waits/PARALLEL_REDO_TRAN_LIST
        N'PARALLEL_REDO_WORKER_SYNC', -- https://www.sqlskills.com/help/waits/PARALLEL_REDO_WORKER_SYNC
        N'PARALLEL_REDO_WORKER_WAIT_WORK', -- https://www.sqlskills.com/help/waits/PARALLEL_REDO_WORKER_WAIT_WORK
        N'PREEMPTIVE_XE_GETTARGETSTATE', -- https://www.sqlskills.com/help/waits/PREEMPTIVE_XE_GETTARGETSTATE
        N'PWAIT_ALL_COMPONENTS_INITIALIZED', -- https://www.sqlskills.com/help/waits/PWAIT_ALL_COMPONENTS_INITIALIZED
        N'PWAIT_DIRECTLOGCONSUMER_GETNEXT', -- https://www.sqlskills.com/help/waits/PWAIT_DIRECTLOGCONSUMER_GETNEXT
        N'QDS_PERSIST_TASK_MAIN_LOOP_SLEEP', -- https://www.sqlskills.com/help/waits/QDS_PERSIST_TASK_MAIN_LOOP_SLEEP
        N'QDS_ASYNC_QUEUE', -- https://www.sqlskills.com/help/waits/QDS_ASYNC_QUEUE
        N'QDS_CLEANUP_STALE_QUERIES_TASK_MAIN_LOOP_SLEEP',
            -- https://www.sqlskills.com/help/waits/QDS_CLEANUP_STALE_QUERIES_TASK_MAIN_LOOP_SLEEP
        N'QDS_SHUTDOWN_QUEUE', -- https://www.sqlskills.com/help/waits/QDS_SHUTDOWN_QUEUE
        N'REDO_THREAD_PENDING_WORK', -- https://www.sqlskills.com/help/waits/REDO_THREAD_PENDING_WORK
        N'REQUEST_FOR_DEADLOCK_SEARCH', -- https://www.sqlskills.com/help/waits/REQUEST_FOR_DEADLOCK_SEARCH
        N'RESOURCE_QUEUE', -- https://www.sqlskills.com/help/waits/RESOURCE_QUEUE
        N'SERVER_IDLE_CHECK', -- https://www.sqlskills.com/help/waits/SERVER_IDLE_CHECK
        N'SLEEP_BPOOL_FLUSH', -- https://www.sqlskills.com/help/waits/SLEEP_BPOOL_FLUSH
        N'SLEEP_DBSTARTUP', -- https://www.sqlskills.com/help/waits/SLEEP_DBSTARTUP
        N'SLEEP_DCOMSTARTUP', -- https://www.sqlskills.com/help/waits/SLEEP_DCOMSTARTUP
        N'SLEEP_MASTERDBREADY', -- https://www.sqlskills.com/help/waits/SLEEP_MASTERDBREADY
        N'SLEEP_MASTERMDREADY', -- https://www.sqlskills.com/help/waits/SLEEP_MASTERMDREADY
        N'SLEEP_MASTERUPGRADED', -- https://www.sqlskills.com/help/waits/SLEEP_MASTERUPGRADED
        N'SLEEP_MSDBSTARTUP', -- https://www.sqlskills.com/help/waits/SLEEP_MSDBSTARTUP
        N'SLEEP_SYSTEMTASK', -- https://www.sqlskills.com/help/waits/SLEEP_SYSTEMTASK
        N'SLEEP_TASK', -- https://www.sqlskills.com/help/waits/SLEEP_TASK
        N'SLEEP_TEMPDBSTARTUP', -- https://www.sqlskills.com/help/waits/SLEEP_TEMPDBSTARTUP
        N'SNI_HTTP_ACCEPT', -- https://www.sqlskills.com/help/waits/SNI_HTTP_ACCEPT
        N'SOS_WORK_DISPATCHER', -- https://www.sqlskills.com/help/waits/SOS_WORK_DISPATCHER
        N'SP_SERVER_DIAGNOSTICS_SLEEP', -- https://www.sqlskills.com/help/waits/SP_SERVER_DIAGNOSTICS_SLEEP
        N'SQLTRACE_BUFFER_FLUSH', -- https://www.sqlskills.com/help/waits/SQLTRACE_BUFFER_FLUSH
        N'SQLTRACE_INCREMENTAL_FLUSH_SLEEP', -- https://www.sqlskills.com/help/waits/SQLTRACE_INCREMENTAL_FLUSH_SLEEP
        N'SQLTRACE_WAIT_ENTRIES', -- https://www.sqlskills.com/help/waits/SQLTRACE_WAIT_ENTRIES
        N'WAIT_FOR_RESULTS', -- https://www.sqlskills.com/help/waits/WAIT_FOR_RESULTS
        N'WAITFOR', -- https://www.sqlskills.com/help/waits/WAITFOR
        N'WAITFOR_TASKSHUTDOWN', -- https://www.sqlskills.com/help/waits/WAITFOR_TASKSHUTDOWN
        N'WAIT_XTP_RECOVERY', -- https://www.sqlskills.com/help/waits/WAIT_XTP_RECOVERY
        N'WAIT_XTP_HOST_WAIT', -- https://www.sqlskills.com/help/waits/WAIT_XTP_HOST_WAIT
        N'WAIT_XTP_OFFLINE_CKPT_NEW_LOG', -- https://www.sqlskills.com/help/waits/WAIT_XTP_OFFLINE_CKPT_NEW_LOG
        N'WAIT_XTP_CKPT_CLOSE', -- https://www.sqlskills.com/help/waits/WAIT_XTP_CKPT_CLOSE
        N'XE_DISPATCHER_JOIN', -- https://www.sqlskills.com/help/waits/XE_DISPATCHER_JOIN
        N'XE_DISPATCHER_WAIT', -- https://www.sqlskills.com/help/waits/XE_DISPATCHER_WAIT
        N'XE_TIMER_EVENT' -- https://www.sqlskills.com/help/waits/XE_TIMER_EVENT
        )
    AND [waiting_tasks_count] > 0
    )
INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,Details,Type)
SELECT 
	TOp 5 
	Priority = 36, 
	CheckGroup = 'Wait Types',
	CheckSubGroup = MAX ([W1].[wait_type]),
	Details = 'Percentage : '+CONVERT(VARCHAR(100),CAST(MAX([W1].[Percentage]) AS DECIMAL (16,2)))+' - '+
	'Wait : '+CONVERT(VARCHAR(100),CAST(MAX([W1].[WaitS]) AS DECIMAL (16,2)))+' - '+
	'Resource : '+CONVERT(VARCHAR(100),CAST(MAX([W1].[ResourceS]) AS DECIMAL (16,2)))+' - '+
	'Signal : '+CONVERT(VARCHAR(100),CAST(MAX([W1].[SignalS]) AS DECIMAL (16,2)))+' - '+
	'WaitCount : '+CONVERT(VARCHAR(100),CAST(MAX([W1].[WaitCount]) AS DECIMAL (16,2))),
	Type = 2
    --CAST ('https://www.sqlskills.com/help/waits/' + MAX ([W1].[wait_type]) as XML) AS [Help/Info URL]
FROM [Waits] AS [W1]
INNER JOIN [Waits] AS [W2] ON [W2].[RowNum] <= [W1].[RowNum]
GROUP BY [W1].[RowNum]
HAVING SUM ([W2].[Percentage]) - MAX( [W1].[Percentage] ) < 95; -- percentage threshold


Print 'It is done.'







/***************************************************************
****************** Index Definition Part
***************************************************************/

Print 'Index definition processing...'

INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,DatabaseName,Details,Type,CreateTSQL)
SELECT
	TOP 10
	Priority=41,
	CheckGroup='Index Definition',
	CheckSubGroup='Missing Indexes',
	DatabaseName = DB_NAME(mid.database_id),
	Details='Index Adventage : '+CONVERT(VARCHAR(100),CONVERT(decimal(18, 2), migs.user_seeks * migs.avg_total_user_cost * (migs.avg_user_impact * 0.01)))+', Seeks : '+CONVERT(VARCHAR(100),migs.user_seeks),
	Type = 0,
	CreateTSQL = mid.[statement]+'EQ Cols : '+mid.equality_columns+', IQ Cols : '+ISNULL(mid.inequality_columns,'')+', Inc Cols : '+ISNULL(mid.included_columns,'')
FROM sys.dm_db_missing_index_group_stats AS migs WITH (NOLOCK)
INNER JOIN sys.dm_db_missing_index_groups AS mig WITH (NOLOCK)
  ON migs.group_handle = mig.index_group_handle
INNER JOIN sys.dm_db_missing_index_details AS mid WITH (NOLOCK)
  ON mig.index_handle = mid.index_handle
ORDER BY user_seeks DESC
OPTION (RECOMPILE)




IF OBJECT_ID('tempdb..##uns_UnusedIndexes') IS NOT NULL DROP TABLE ##uns_UnusedIndexes;
CREATE TABLE ##uns_UnusedIndexes (DatabaseName VARCHAR(255), ObjectName VARCHAR(255), IndexName VARCHAR(255), TableRows BIGINT, DropScript VARCHAR(8000))
EXEC sp_MSforeachdb '
USE [?]
IF ''?'' <> ''master'' AND ''?'' <> ''model'' AND ''?'' <> ''msdb'' AND ''?'' <> ''tempdb''
INSERT INTO ##uns_UnusedIndexes (DatabaseName,ObjectName,IndexName,TableRows,DropScript)
SELECT
	TOP 10
	DatabaseName = ''?'' ,
    ObjectName = o.name,
	IndexName = i.name,
	p.TableRows,
	DropScript = ''DROP INDEX '' + QUOTENAME(i.name)+ '' ON '' + QUOTENAME(s.name) + ''.''+ QUOTENAME(OBJECT_NAME(dm_ius.OBJECT_ID))
FROM sys.dm_db_index_usage_stats dm_ius
INNER JOIN sys.indexes i WITH (NOLOCK) ON i.index_id = dm_ius.index_id AND dm_ius.OBJECT_ID = i.OBJECT_ID
INNER JOIN sys.objects o WITH (NOLOCK) ON dm_ius.OBJECT_ID = o.OBJECT_ID
INNER JOIN sys.schemas s WITH (NOLOCK) ON o.schema_id = s.schema_id
INNER JOIN (SELECT SUM(p.rows) TableRows,p.index_id,p.OBJECT_ID FROM sys.partitions p WITH (NOLOCK) GROUP BY p.index_id ,p.OBJECT_ID) p ON p.index_id = dm_ius.index_id AND dm_ius.OBJECT_ID = p.OBJECT_ID
WHERE OBJECTPROPERTY(dm_ius.OBJECT_ID, ''IsUserTable'') = 1
AND i.type = 2
AND i.is_primary_key = 0
AND i.is_unique_constraint = 0
AND (dm_ius.last_user_seek < GETDATE()-30 OR dm_ius.last_user_seek IS NULL) 
AND (dm_ius.last_user_scan < GETDATE()-30 OR dm_ius.last_user_scan IS NULL)
ORDER BY TableRows DESC'

INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,DatabaseName,Details,Type,DropTSQL)
SELECT
	TOP 10
	Priority=42,
	CheckGroup='Index Definition',
	CheckSubGroup='Unused Indexes',
	DatabaseName,
	Details = ObjectName+'.'+IndexName+' - Rows : '+CONVERT(varchar(100),TableRows),
	Type = 0,
	DropTSQL = DropScript
FROM ##uns_UnusedIndexes






IF OBJECT_ID('tempdb..##uns_NonIndexedForeignKey') IS NOT NULL DROP TABLE ##uns_NonIndexedForeignKey;
CREATE TABLE ##uns_NonIndexedForeignKey (DatabaseName VARCHAR(255), TableName VARCHAR(255), SchemaName VARCHAR(255), ForeignKeyName VARCHAR(500))
EXEC sp_MSforeachdb '
USE [?]
IF ''?'' <> ''master'' AND ''?'' <> ''model'' AND ''?'' <> ''msdb'' AND ''?'' <> ''tempdb''
INSERT INTO ##uns_NonIndexedForeignKey (DatabaseName,TableName,SchemaName,ForeignKeyName)
SELECT 
	TOP 10
	DatabaseName = ''?'',
	TableName = o.name , 
	SchemaName = s.name, 
	ForeignKeyName = fk.name 
FROM sys.foreign_keys fk
INNER JOIN sys.objects o WITH (NOLOCK) ON o.[object_id] = fk.parent_object_id
INNER JOIN sys.schemas s WITH (NOLOCK) ON s.[schema_id] = o.[schema_id]
WHERE o.is_ms_shipped = 0
	AND NOT EXISTS 
		(SELECT 1 FROM sys.index_columns ic WITH (NOLOCK) WHERE EXISTS 
			(SELECT 1 FROM sys.foreign_key_columns fkc WITH (NOLOCK) WHERE fkc.constraint_object_id = fk.[object_id] AND fkc.parent_object_id = ic.[object_id] AND fkc.parent_column_id = ic.column_id )
		GROUP BY ic.index_id
		HAVING COUNT(*) = MAX(index_column_id) AND COUNT(1) = (SELECT COUNT(1) FROM sys.foreign_key_columns fkc WITH (NOLOCK) WHERE fkc.constraint_object_id = fk.[object_id]))
ORDER BY o.[name], fk.[name]'

INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,DatabaseName,Details,Type)
SELECT
	TOP 10
	Priority=43,
	CheckGroup='Index Definition',
	CheckSubGroup='Non-Indexed ForeignKeys',
	DatabaseName,
	Details = QUOTENAME(SchemaName)+'.'+QUOTENAME(TableName)+' the table has non indexed foreign key. ForeignKey name is : '+QUOTENAME(ForeignKeyName),
	Type = 2
FROM ##uns_NonIndexedForeignKey


      



IF OBJECT_ID('tempdb..##uns_FillFactorGroupCounts') IS NOT NULL DROP TABLE ##uns_FillFactorGroupCounts;
CREATE TABLE ##uns_FillFactorGroupCounts (DatabaseName VARCHAR(255), FillFactorValue INT, [Count] INT)
EXEC sp_MSforeachdb '
USE [?]
IF ''?'' <> ''master'' AND ''?'' <> ''model'' AND ''?'' <> ''msdb'' AND ''?'' <> ''tempdb''
INSERT INTO ##uns_FillFactorGroupCounts (DatabaseName,FillFactorValue,[Count])
SELECT 
	DatabaseName = ''?'',
	fill_factor,
	Count = COUNT(1)
FROM sys.indexes
WHERE fill_factor BETWEEN 0 AND 80 
GROUP BY fill_factor'
INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,DatabaseName,Details,Type)
SELECT
	Priority=44,
	CheckGroup='Index Definition',
	CheckSubGroup='Fill Factor',
	DatabaseName,
	Details = CONVERT(varchar(10),[Count])+' indexes fill factor is : '+CONVERT(varchar(10),FillFactorValue),
	Type = 2
FROM ##uns_FillFactorGroupCounts






IF OBJECT_ID('tempdb..##uns_HeapTableCounts') IS NOT NULL DROP TABLE ##uns_HeapTableCounts;
CREATE TABLE ##uns_HeapTableCounts (DatabaseName VARCHAR(255), [Count] INT)
EXEC sp_MSforeachdb '
USE [?]
IF ''?'' <> ''master'' AND ''?'' <> ''model'' AND ''?'' <> ''msdb'' AND ''?'' <> ''tempdb''
INSERT INTO ##uns_HeapTableCounts (DatabaseName,[Count])
SELECT   
	DatabaseName = ''?'',
	Count = COUNT(o.name) 
FROM sys.indexes i WITH (NOLOCK)
INNER JOIN sys.objects o WITH (NOLOCK) ON  i.object_id = o.object_id
WHERE o.type_desc = ''USER_TABLE'' AND i.type_desc = ''HEAP'''
INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,DatabaseName,Details,Type)
SELECT
	Priority=44,
	CheckGroup='Index Definition',
	CheckSubGroup='Heap Table',
	DatabaseName,
	Details = 'Database has '+CONVERT(varchar(10),[Count])+' heap table(s).',
	Type = 2
FROM ##uns_HeapTableCounts
WHERE [Count]>0




      
	  --Eklenecekler var unutma

	  --
	  --
	  --

	  --
	  --
	  --
	  --
	  --
	  --
	  --
	  --



Print 'It is done.'
























/***************************************************************
****************** Backup and Corruption
***************************************************************/

Print 'Backup operation processing...'

IF OBJECT_ID('tempdb..#tmp_BackupDetails') IS NOT NULL
	DROP TABLE #tmp_BackupDetails;
SELECT  
	d.database_id,
    [database_name] = d.name, 
    [last_backup_date] = (MAX(backup_finish_date)),
    backup_size_mb=CAST(COALESCE(MAX(bs.backup_size),0)/1024.00/1024.00 AS NUMERIC(18,2)),
    avg_backup_duration_sec= AVG(CAST(DATEDIFF(s, bs.backup_start_date, bs.backup_finish_date) AS int)),
    bs.type
	INTO #tmp_BackupDetails
FROM sys.databases d WITH (NOLOCK) 
LEFT JOIN msdb.dbo.backupset bs WITH (NOLOCK) 
        ON bs.database_name = d.name 
            AND bs.is_copy_only = 0
    WHERE d.name NOT IN ('tempdb','distribution') AND d.state=0
GROUP BY d.database_id,d.Name, bs.type

INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,DatabaseName,Details,Details2,Type)
SELECT 
	Priority = 51, 
	CheckGroup = 'Backup',
	CheckSubGroup = CASE WHEN type='D' THEN 'Full Backup Operations' WHEN type='L' THEN 'Log Backup Operations' WHEN type IS NULL THEN 'Warning Backup Operations' END ,
	DatabaseName = [database_name] ,
	Details=
		CASE 
			WHEN last_backup_date > GETDATE()-3 AND type='D' THEN 'Last FULL Backup : '+CONVERT(VARCHAR(100),last_backup_date,120) 
			WHEN last_backup_date IS NULL THEN '! there is no FULL backup.'
			WHEN last_backup_date < GETDATE()-3 AND type='D' THEN '! there is no FULL backup in last three days. - Last FULL Backup : '+CONVERT(VARCHAR(100),last_backup_date,120) 
			WHEN last_backup_date > GETDATE()-1 AND type='L' THEN 'Last LOG Backup : '+CONVERT(VARCHAR(100),last_backup_date,120)
			WHEN last_backup_date IS NULL AND type='L' THEN '! there is no LOG backup'
			WHEN last_backup_date < GETDATE()-1 AND type='L' THEN '! there is no LOG backup in last day - Last LOG Backup : '+CONVERT(VARCHAR(100),last_backup_date,120)
		END,
	Details2 = 'Last backup taken '+CAST(backup_size_mb AS VARCHAR(20))+' MB in '+CAST(avg_backup_duration_sec AS VARCHAR(20))+' second(s).',
	Type = 
		CASE 
			WHEN last_backup_date > GETDATE()-3 AND type='D' THEN 1
			WHEN last_backup_date IS NULL THEN 3
			WHEN last_backup_date < GETDATE()-3 AND type='D' THEN 2
			WHEN last_backup_date > GETDATE()-1 AND type='L' THEN 1
			WHEN last_backup_date IS NULL AND type='L' THEN 3
			WHEN last_backup_date < GETDATE()-1 AND type='L' THEN 2
		END
FROM #tmp_BackupDetails 
ORDER BY database_id

INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,DatabaseName,Details,Type)
SELECT 51 Priority, 'Backup' CheckGroup,'FULL Recovery Model & Log Backup Operations' CheckSubGroup,d.name DatabaseName,
'Database recovery model is FULL but no LOG backup. ' Details,3
FROM sys.databases d WITH (NOLOCK) WHERE database_id NOT IN (SELECT database_id FROM #tmp_BackupDetails WHERE type='L')
AND d.recovery_model=1 AND d.state=0





Print 'Data Corruption Check processing...'

IF 0>(SELECT COUNT(1) FROM msdb.dbo.suspect_pages)
BEGIN
	INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,DatabaseName,Details,Details2,Type)
	SELECT 
		Priority = 52, 
		CheckGroup = 'Data Corruption',
		CheckSubGroup = 'Suspect Pages',
		DatabaseName = DB_NAME([database_id]),
		Details = 'Page : '+CONVERT(VARCHAR(100),[database_id])+':'+CONVERT(VARCHAR(100),[file_id])+':'+CONVERT(VARCHAR(100),[page_id]),
		Details2 = '' +
		CASE WHEN event_type = 1 THEN 'An 823 error that causes a suspect page (such as a disk error) or an 824 error other than a bad checksum or a torn page (such as a bad page ID).'
		WHEN event_type = 2 THEN 'Bad checksum.'
		WHEN event_type = 3 THEN 'Torn page.'
		WHEN event_type = 4 THEN 'Restored (page was restored after it was marked bad).'
		WHEN event_type = 5 THEN 'Repaired (DBCC repaired the page).'
		WHEN event_type = 7 THEN 'Deallocated by DBCC.' END +
		' Error Count : '+CONVERT(VARCHAR(100),[error_count])+ ' Last Update Date : '+CONVERT(VARCHAR(100),[last_update_date]),
		--Script eklenecek dbcc checkdb
		Type = 3
	FROM msdb.dbo.suspect_pages WITH (NOLOCK)
	ORDER BY database_id
END
ELSE
BEGIN
	INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,Details,Type)
	VALUES (52,'Data Corruption','Suspect Pages','There is no suspect pages on [msdb].[dbo].[suspect_pages]',1)
END




IF OBJECT_ID(N'tempdb..#uns_LastCheckDBCC') IS NOT NULL BEGIN DROP TABLE #uns_LastCheckDBCC END

CREATE TABLE #uns_LastCheckDBCC
(DatabaseName varchar(100), IsOnline BIT, ParentObject varchar(100), [Object] varchar(100), [Field] varchar(100), [Value] varchar(100));

DECLARE @cmd NVARCHAR(MAX);
DECLARE @dbName SYSNAME;
DECLARE @IsOnline BIT;

DECLARE cur CURSOR LOCAL FORWARD_ONLY STATIC
FOR
SELECT DBCCCommand = 'DBCC DBINFO(''' + d.name + ''') WITH TABLERESULTS;', DatabaseName = d.name, IsOnline = CONVERT(BIT,CASE WHEN d.state_desc = 'ONLINE' THEN 1 ELSE 0 END)
FROM sys.databases d
ORDER BY d.name;

OPEN cur;
FETCH NEXT FROM cur INTO @cmd, @dbName, @IsOnline;

WHILE @@FETCH_STATUS = 0
BEGIN
    RAISERROR (@dbName, 0, 1) WITH NOWAIT;
    IF @IsOnline = 1
    BEGIN
        INSERT INTO #uns_LastCheckDBCC (ParentObject, [Object], [Field], [Value])
        EXEC sp_executesql @cmd;
        UPDATE #uns_LastCheckDBCC 
        SET DatabaseName = @dbName
            , IsOnline = @IsOnline
        WHERE DatabaseName IS NULL;
    END
    ELSE
    BEGIN
        INSERT INTO #uns_LastCheckDBCC (DatabaseName, IsOnline)
        VALUES (@dbName, @IsOnline)
    END
    FETCH NEXT FROM cur INTO @cmd, @dbName, @IsOnline;
END

CLOSE cur;
DEALLOCATE cur;



INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,DatabaseName,Details,Type)
SELECT 
	Priority = 53, 
	CheckGroup = 'Data Integrity',
	CheckSubGroup = 'Last Good Check DB',
	DatabaseName = r.DatabaseName ,
	Details = 
		CASE 
			WHEN r.Value='1900-01-01 00:00:00.000' OR r.Value IS NULL THEN 'The database even not Check DBCC.' 
			ELSE 'Last Check DBCC : '+CONVERT(VARCHAR(100),r.value,120) END,
	Type = CASE 
			WHEN r.Value>GETDATE()-7 THEN 1
			ELSE 2 END
FROM #uns_LastCheckDBCC r
WHERE r.field = 'dbi_dbccLastKnownGood'
    OR r.field IS NULL;
	











/***************************************************************
****************** Sysadmin Info
***************************************************************/

INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,DatabaseName,Details,Details2,Comment,Type)
SELECT
	Priority=1300,
	CheckGroup='sysadmin',
	CheckSubGroup='Info',
	DatabaseName = NULL,
	Details=cast(COUNT(1) as nvarchar(20))+' login, sysadmin yetkisine sahiptir.',
	Details2 = NULL,
	Comment = NULL,
	Type = 0
FROM sys.syslogins sl WITH (NOLOCK)
LEFT JOIN sys.server_principals sp WITH (NOLOCK) ON sl.name=sp.name
WHERE sl.sysadmin=1 AND is_disabled=0






/***************************************************************
****************** CPU Info
***************************************************************/

IF OBJECT_ID('tempdb..#temp_CPUInfo') IS NOT NULL
	DROP TABLE #temp_CPUInfo;
DECLARE @ts_now bigint = (SELECT cpu_ticks/(cpu_ticks/ms_ticks) FROM sys.dm_os_sys_info WITH (NOLOCK)) 

;WITH cte_CPUInfo
AS (
SELECT TOP(256) SQLProcessUtilization AS [SQLServerProcessCPUUtilization], 
               100 - SystemIdle - SQLProcessUtilization AS [OtherProcessCPUUtilization]
FROM (SELECT record.value('(./Record/@id)[1]', 'int') AS record_id, 
			record.value('(./Record/SchedulerMonitorEvent/SystemHealth/SystemIdle)[1]', 'int') 
			AS [SystemIdle], 
			record.value('(./Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int') 
			AS [SQLProcessUtilization], [timestamp] 
	  FROM (SELECT [timestamp], CONVERT(xml, record) AS [record] 
			FROM sys.dm_os_ring_buffers WITH (NOLOCK)
			WHERE ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR' 
			AND record LIKE N'%<SystemHealth>%') AS x) AS y )

INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,DatabaseName,Details,Details2,Type)
SELECT 
	Priority = 1300, 
	CheckGroup = 'CPU',
	CheckSubGroup = 'AVG CPU Values (Last 256 Min)',
	DatabaseName = NULL,
	Details = 'SQL Server Process CPU Utilization : '+CONVERT(VARCHAR(100),AVG([SQLServerProcessCPUUtilization])),
	Details2 = ' Other Process CPU Utilization : '+CONVERT(VARCHAR(100),AVG([OtherProcessCPUUtilization])),
	Type = 0
FROM cte_CPUInfo



/***************************************************************
****************** Performans Counters Info
***************************************************************/

INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,DatabaseName,Details,Details2,Comment,Type)
SELECT 
	Priority = 1300, 
	CheckGroup = 'Counters',
	CheckSubGroup = counter_name,
	DatabaseName = NULL,
	Details = 'Value : '+CONVERT(VARCHAR(100),[cntr_value]),
	Details2 = NULL,
	Comment = NULL --'If value less than 300, probably you have to optimize your queries which start with using TOP IO or more memory.'
	,Type = 0
FROM sys.dm_os_performance_counters WITH (NOLOCK)
WHERE instance_name IN ('', '_Total') AND cntr_type != 272696576
	AND counter_name IN
	('Total Server Memory (KB)','Target Server Memory (KB)','Memory Grants Pending','Page life expectancy','Buffer cache hit ratio','Average Wait Time (ms)','Active Temp Tables','User Connections','Lock Wait Time (ms)','Average Wait Time (ms)','Free Memory (KB)')
OPTION (RECOMPILE)



/***************************************************************
****************** Deadlock
***************************************************************/

INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,DatabaseName,Details,Details2,Comment,Type)
SELECT 
	Priority = 1300, 
	CheckGroup = 'Lock Info',
	CheckSubGroup = 'Deadlock',
	DatabaseName = NULL,
	Details = 'Number of Deadlocks : '+CONVERT(VARCHAR(100),cntr_value),
	Details2 = NULL,
	Comment = NULL,
	Type = 3
FROM sys.dm_os_performance_counters WITH (NOLOCK)
WHERE counter_name = 'Number of Deadlocks/sec' AND instance_name = '_Total' AND cntr_value>0




/***************************************************************
****************** Always On
***************************************************************/

INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,DatabaseName,Details,Details2,Comment,Type)
SELECT 
	Priority = 1300,
	CheckGroup = 'Always On',
	CheckSubGroup = CASE WHEN last_commit_time<DATEADD(MINUTE,-30,GETDATE()) THEN 'Warning - There is delay 30 min' ELSE 'Info' END,
	DatabaseName = DB_NAME(database_id),
	Details = 
	'Last Commit : '+CONVERT(VARCHAR(100),last_commit_time,120)
	+' - Queue Size : '+CONVERT(VARCHAR(100),redo_queue_size),
	Details2 = 
	'Estimated Time : '+ CONVERT(VARCHAR(20),DATEADD(mi,(redo_queue_size/redo_rate/60.0),GETDATE()),120)
	+' - Behind Time : '+CAST(CAST(((DATEDIFF(s,last_commit_time,GetDate()))/3600) as varchar) + ' hour(s), ' + CAST((DATEDIFF(s,last_commit_time,GetDate())%3600)/60 as varchar) + ' min, ' + CAST((DATEDIFF(s,last_commit_time,GetDate())%60) as varchar) + ' sec' as VARCHAR(30))
	,
	Comment = CASE WHEN last_commit_time<DATEADD(MINUTE,-30,GETDATE()) THEN 'If your Queue Size more than 1000, probably you have a transfer issue.' ELSE NULL END,
	Type = CASE WHEN redo_queue_size>1000 THEN 3 WHEN redo_queue_size BETWEEN 500 AND 1000 THEN 2 ELSE 1 END
FROM master.sys.dm_hadr_database_replica_states WITH (NOLOCK)
WHERE last_redone_time is not null AND redo_rate>0






/*

EXEC [usp_DailyChecker]


DROP TABLE IF EXISTS #IOWarningResults
CREATE TABLE #IOWarningResults(LogDate datetime, ProcessInfo sysname, LogText varchar(MAX));

	INSERT INTO #IOWarningResults 
	EXEC xp_readerrorlog 0, 1;

SELECT LogDate, ProcessInfo, LogText
FROM #IOWarningResults
WHERE LogText LIKE 'taking longer than 15 seconds'
ORDER BY LogDate DESC;

DROP TABLE #IOWarningResults;





INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,DatabaseName,Details,Details2,Comment)
SELECT 
	Priority = 3, 
	CheckGroup = '',
	CheckSubGroup = '',
	DatabaseName = '',
	Details = '',
	Details2 = '',
	Comment = ''
FROM 




-- Look for I/O requests taking longer than 15 seconds in the six most recent SQL Server Error Logs (Query 30) (IO Warnings)




-- Missing Indexes for all databases by Index Advantage  (Query 33) (Missing Indexes All Databases)
SELECT CONVERT(decimal(18,2), migs.user_seeks * migs.avg_total_user_cost * (migs.avg_user_impact * 0.01)) AS [index_advantage],
FORMAT(migs.last_user_seek, 'yyyy-MM-dd HH:mm:ss') AS [last_user_seek], 
mid.[statement] AS [Database.Schema.Table],
COUNT(1) OVER(PARTITION BY mid.[statement]) AS [missing_indexes_for_table],
COUNT(1) OVER(PARTITION BY mid.[statement], equality_columns) AS [similar_missing_indexes_for_table],
mid.equality_columns, mid.inequality_columns, mid.included_columns, migs.user_seeks, 
CONVERT(decimal(18,2), migs.avg_total_user_cost) AS [avg_total_user_cost], migs.avg_user_impact 
FROM sys.dm_db_missing_index_group_stats AS migs WITH (NOLOCK)
INNER JOIN sys.dm_db_missing_index_groups AS mig WITH (NOLOCK)
ON migs.group_hANDle = mig.index_group_hANDle
INNER JOIN sys.dm_db_missing_index_details AS mid WITH (NOLOCK)
ON mig.index_hANDle = mid.index_hANDle
ORDER BY index_advantage DESC OPTION (RECOMPILE);




-- Get CPU utilization by database (Query 35) (CPU Usage by Database)
WITH DB_CPU_Stats
AS
(SELECT pa.DatabaseID, DB_Name(pa.DatabaseID) AS [Database Name], SUM(qs.total_worker_time/1000) AS [CPU_Time_Ms]
 FROM sys.dm_exec_query_stats AS qs WITH (NOLOCK)
 CROSS APPLY (SELECT CONVERT(int, value) AS [DatabaseID] 
              FROM sys.dm_exec_plan_attributes(qs.plan_hANDle)
              WHERE attribute = N'dbid') AS pa
 GROUP BY DatabaseID)
SELECT ROW_NUMBER() OVER(ORDER BY [CPU_Time_Ms] DESC) AS [CPU Rank],
       [Database Name], [CPU_Time_Ms] AS [CPU Time (ms)], 
       CAST([CPU_Time_Ms] * 1.0 / SUM([CPU_Time_Ms]) OVER() * 100.0 AS DECIMAL(5, 2)) AS [CPU Percent]
FROM DB_CPU_Stats
WHERE DatabaseID <> 32767 -- ResourceDB
ORDER BY [CPU Rank] OPTION (RECOMPILE);


-- Get I/O utilization by database (Query 36) (IO Usage By Database)
WITH Aggregate_IO_Statistics
AS (SELECT DB_NAME(database_id) AS [Database Name],
    CAST(SUM(num_of_bytes_read + num_of_bytes_written) / 1048576 AS DECIMAL(12, 2)) AS [ioTotalMB],
    CAST(SUM(num_of_bytes_read ) / 1048576 AS DECIMAL(12, 2)) AS [ioReadMB],
    CAST(SUM(num_of_bytes_written) / 1048576 AS DECIMAL(12, 2)) AS [ioWriteMB]
    FROM sys.dm_io_virtual_file_stats(NULL, NULL) AS [DM_IO_STATS]
    GROUP BY database_id)
SELECT ROW_NUMBER() OVER (ORDER BY ioTotalMB DESC) AS [I/O Rank],
        [Database Name], ioTotalMB AS [Total I/O (MB)],
        CAST(ioTotalMB / SUM(ioTotalMB) OVER () * 100.0 AS DECIMAL(5, 2)) AS [Total I/O %],
        ioReadMB AS [Read I/O (MB)], 
		CAST(ioReadMB / SUM(ioReadMB) OVER () * 100.0 AS DECIMAL(5, 2)) AS [Read I/O %],
        ioWriteMB AS [Write I/O (MB)], 
		CAST(ioWriteMB / SUM(ioWriteMB) OVER () * 100.0 AS DECIMAL(5, 2)) AS [Write I/O %]
FROM Aggregate_IO_Statistics
ORDER BY [I/O Rank] OPTION (RECOMPILE);


DECLARE @vCompatibilityLevel INT
SELECT @vCompatibilityLevel = SUBSTRING((CONVERT(VARCHAR(100),(SERVERPROPERTY('ProductVersion')))),0,CHARINDEX('.',(CONVERT(VARCHAR(100),(SERVERPROPERTY('ProductVersion'))))))+'0'

INSERT INTO ##uns_DailyChecker (Priority,CheckGroup,CheckSubGroup,DatabaseName,Details,Details2,Comment)
SELECT 
	Priority = 1600, 
	CheckGroup = 'Database(s)',
	CheckSubGroup = 'Compatibility Level',
	DatabaseName = name,
	Details = 'This database level less than Server Compatibility Level that is : '+CONVERT(VARCHAR(100),@vCompatibilityLevel)+'',
	Details2 = NULL,
	Comment = NULL
FROM sys.databases
WHERE compatibility_level<@vCompatibilityLevel

usp_DailyChecker 1

*/


IF @ResultHTML=1
BEGIN
	
IF OBJECT_ID('tempdb..#uns_ResultHTML') IS NOT NULL DROP TABLE #uns_ResultHTML;
CREATE TABLE #uns_ResultHTML (Ordernaryus INT,HTMLValue NVARCHAR(MAX))

	INSERT INTO #uns_ResultHTML (Ordernaryus,HTMLValue)
	SELECT -999,'
	<html>
	  <head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
		<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" crossorigin="anonymous">
	</head>
	<body>
	<div class="container">'  AS HTMLValue
	UNION
	SELECT -998,'<br><br><div class="text-center card text-white bg-dark mb-3"><div class="card-header"><img src="http://www.silikonakademi.com/img/logo.png" class="mr-3" alt="..."></div><div class="card-body"><p class="card-text">Health Check Silikon Akademi tarafından [Customer] için hazırlanmıştır.</p><a href="http://www.silikonakademi.com/" class="btn btn-outline-info">silikonakademi.com</a></div></div>'  AS HTMLValue
	UNION
	SELECT -1,'<br><h4>SQL Server Bilgileri </h4><br>'  AS HTMLValue
	UNION
	SELECT 0,'<table class="table table-bordered">' HTMLValue
	UNION
	SELECT 1,
		'<tr><td>'+CheckSubGroup+'</td><td>'+Details+'</td></tr>'
		  AS HTMLValue
	FROM ##uns_DailyChecker
	WHERE CheckGroup='Server Info'
	UNION
	SELECT 2,'</table>' HTMLValue
	UNION
	SELECT 3,'
	<br><h4>SQL Server Konfigürasyonu </h4>
	<p>Aşağıdaki ayarların Best Practice''lere göre düzenlenmesi gerekmektedir. 
	<br><b>automatic soft-NUMA disabled </b>: Numa ayarının otomatik olarak yapılmasını sağlamaktadır. <u><mark>Kapalı (0)</mark> olarak ayarlanması gerekmektedir.</u>
	<br><b>backup compression default </b> : Backup alınırken belirtilmediği durumlarda varsayılan olarak backup''ın sıkıştırılarak alınıp alınmayacağını belirtir. <u><mark>Açık</mark> olarak ayarlanması tavsiye edilmektedir.</u>
	<br><b>cost threshold for parallelism </b> : Bu değer default 5 olarak gelmektedir. Maliyeti bu değerini aşan sorgular SQL Server tarafından paralel çalıştırılır.
	<br><b>fill factor (%) </b> : SQL Server seviyesinde Fill Factor değeri yeni oluşturulan indeksler üzerinde varsayılan olarak verilebilmektedir. Fill Factor değeri page''lerde boşluk bırakabilmemizi sağlayan özellik olup bu özellik yanlış ayarlanması durumunda indekslerin fragmante olmasına ve performans kayıplarına sebep olmaktadır. <u>Değerin <mark>90</mark> olarak ayarlanması tavsiye edilmektedir.</u>
	<br><b>max degree of parallelism </b> : Değeri verilen CPU core sayısını göstermektedir. Defualt olarak 0 gelen bu değer, maliyetli çalıştırılan bir sorgunun birden fazla CPU Core’u kullanılabileceği anlamına gelmektedir. Bu da maliyetli çalışan bir sorgunun diğer sorgular için ayrılan kaynakları da kullanıp yavaşlığa sebep olmasına yol açabilir.
	<br><b>max server memory (MB) </b> : SQL Server''a ayrılmış memory miktarını belirtmektedir.
	<br><b>optimize for ad hoc workloads </b> : SQL Server üzerinde yapılan her sorgular Execution Planlar oluşturulmakta ve bu planlar Memory üzerinde bulunmaktadır. Memory üzerinde önemli bir bölüm olan Plan Cache alnını optimize etmek için kullanılan bu ayar, parametrik olmayan veya bir defa çalıştırılıp daha sonra kullanılmayan execution planların Plan Cache''te tamamının saklanmasını engeller. Bu sayede Memory üzerinde yer alan Plan Cache bölümünden tasarruf yapılmış olur. <u><mark>Açık</mark> olarak ayarlanması tavsiye edilmektedir.</u>
	<br><b>remote admin connections </b> : SQL Server açılan  her bağlantı için bir kaynak ayırır. Eğer yeni bağlantı için yeterli kaynak yok ise SQL Server kaynak açılana kadar cevap vermeyecektir. Böyle durumlarda SQL Server servisini restart etmek yerine, eğer DAC(Dedicated Admin Connections) ayarı açık ise SQL Server sysadmin rolüne sahip kişiler için her zaman bir bağlantı kaynağı ayıracak ve sorun anında SQL server''a bağlanmamızı sağlayacaktır. <u><mark>Açık</mark> olarak ayarlanması tavsiye edilmektedir.</u>
	<br><b>xp_cmdshell </b> : SQL Server üzerinden OS üzerine erişime izin veren ayardır.
	</p>
	<table class="table table-dark">' HTMLValue
	UNION
	SELECT 4,
		'<tr><td>'+Details+'</td></tr>'
		  AS HTMLValue
	FROM ##uns_DailyChecker
	WHERE CheckGroup='Server Configuration' AND CheckSubGroup='Info'
	UNION
	SELECT 5,'</table>' HTMLValue
	UNION
	SELECT 9,'
	<br><h4>Group Policy Konfigürasyonu </h4>
	<p><b>Instant File Initialization (IFI) </b>: Bu ayar veritabanımızın data dosyaları oluşturulduğunda ya da SQL Server tarafından büyütülmesi gerektiğinde, bunu daha hızlı yapmak için kullanılmaktadır. Daha hızlı yapmasının sebebi ise, bu ayarı aktif etmediğimiz durumda veritabanı data dosyalarımızın oluşturulması veya büyütülmesi gerektiğinde öncelikle dosyanın tümü 0 ile doldurularak SQL Serverın kullanımı için ayrılıyor. Bu ayarı aktifleştirdiğimizde data dosyalarımız SQL Serverın kullanımı için ayrıldığında 0 ile doldurulmaz ve böylece yeni data dosyalarının oluşturulması ve büyütülmesi hızlı bir şekilde tamamlanır. <u>SQL Server service hesabının bu policy''e tanımlanması gerekmektedir.</u>
	<br><b>Lock Pages in memory </b>: SQL Server aldığı memory''i uygulamaların ya da işletim sisteminin ihtiyaç duyması durumunda aldığı memoryi paylaşmaması performans açısından önemli olmaktadır. Bunun için Local Policy tarafında SQL Server servis hesabına yetki tanımlanması gerekmektedir. <u>SQL Server service hesabının bu policy''e tanımlanması gerekmektedir.</u>
	</p>
	<table class="table table-bordered">' HTMLValue
	UNION
	SELECT 10,
		'<tr '+CASE WHEN Type=0 THEN 'class="table-info"' WHEN Type=1 THEN 'class="table-success"' WHEN Type=2 THEN 'class="table-warning"' WHEN Type=3 THEN 'class="table-danger"' END+'><td>'+CheckSubGroup+'</td><td>'+Details+'</td></tr>'
		  AS HTMLValue
	FROM ##uns_DailyChecker
	WHERE CheckGroup='Group Policy Info'
	UNION
	SELECT 11,'</table>' HTMLValue
	UNION
	SELECT 12,'
	<br><h4>tempdb Konfigürasyonu </h4>
	<p>tempdb veritabanı bir sistem veritabanı olup, SQL Server her yeniden başlatıldığında bu veritabanı yeniden oluşturulmaktadır. tempdb önemli bir sistem veritabanı olup sadece kullanıcı tanimli temp tablolar için değil, SQL Server ihtiyaç duyduğunda Order by , group by, join gibi işlemlerde de Tempdb yi kullanmaktadır. Bu sebeple tempdb sistem performansını doğrudan etkilemektedir, tempdb file sayısının fazla olması işlemlerin bu file''lara bölünerek performans kazanmasını sağlamaktadır. tempdb data file''larının boyutlarının aynı olması ve kullandığı diskin hızlı olması hatta sistem üzerindeki SSD disklerde kullanılması önerilmektedir. 
	</p>
	<table class="table table-bordered">' HTMLValue
	UNION
	SELECT 13,
		'<tr '+CASE WHEN Type=0 THEN 'class="table-info"' WHEN Type=1 THEN 'class="table-success"' WHEN Type=2 THEN 'class="table-warning"' WHEN Type=3 THEN 'class="table-danger"' END+'><td>'+CheckSubGroup+'</td><td>'+Details+'</td></tr>'
		  AS HTMLValue
	FROM ##uns_DailyChecker
	WHERE CheckGroup='Database Configuration' AND CheckSubGroup='tempdb Configuration'
	UNION
	SELECT 14,'</table>' HTMLValue
	UNION
	SELECT 15,'
	<br><h4>Veritabanı Konfigürasyonları </h4>
	<p>
	<b> is_auto_close_on </b> : SQL Server''da kullanılmayan, üzerinde connection olmayan veritabanlarının kapalı konuma alınması demektir. Ancak bu, veritabanını kullanmak isteyen bir sonraki kullanıcının bekleme süresini arttıracağından bu özelliğin kapatılması önerilir.
	<br><b>is_auto_shrink_on </b> : SQL Server''a SQL Server üzerinde yapılan işlemler sonrasında veritabanında büyümeler olsa bile verilerin silinmesi halinde veritabanı boyutu küçülmeyecektir.Zorunlu olmayan durumlar dışında Shrink işlemi ile veritabanın data dosyalarının küçültülmesi, indekslerin bozulmasına(fragmantasyon) sebep olacaktır. Bu sebeple veritabanları üzerinde Auto Shrink açılmamalı ve data dosyaları üzerinde Shrink işlemiyapılmamalıdır.Eğer zorunlu bir durum var ise Shrink işleminden sonraIndex''lerin bakımlarının yapılması gerekmektedir.
	<br><b>is_auto_create_stats_on </b> : SQL Server SQL Server daha iyi execution planlar oluşturmak için Statistic''leri kullanır. Bu özelliğin açık olmaması eksik statistic''ler sebebiyle sorgularda performans sorununa yol açabilir.                                     
	<br><b>is_auto_update_stats_on </b> : SQL Server SQL Server daha iyi execution planlar oluşturmak için Statistic''leri kullanır. Bu özelliğin açık olmaması eksik statistic''ler sebebiyle sorgularda performans sorununa yol açabilir.
	<br><b>compatibility_level </b> : SQL Server''da SQL Server eski bir sürümden upgrade edildiğinde veya eski bir sürümdeki veritabanı daha güncel bir sürüme alındığında bu özellik değişmemektedir. Veritabanının güncel sürümün tüm özelliklerinden faydalanmasını sağlamak adına bu değişiklik yapılmalıdır.
	<br><b>Recovery Model </b> : FULL,SIMPLE ve BULK-LOGGED olarak üçe ayrılırlar. Log dosyasının yapısıyla alakalı farklılıklara sahip olup veritabanının kullanımına göre düzenlenmesi gerekmektedir.

	</p>
	<table class="table table-bordered">' HTMLValue
	UNION
	SELECT 16,
		'<tr '+CASE WHEN Type=0 THEN 'class="table-info"' WHEN Type=1 THEN 'class="table-success"' WHEN Type=2 THEN 'class="table-warning"' WHEN Type=3 THEN 'class="table-danger"' END+'><td>'+DatabaseName+'</td><td>'+REPLACE(Details,',','<br>')+'</td></tr>'
		  AS HTMLValue
	FROM ##uns_DailyChecker
	WHERE CheckGroup='Database Configuration' AND CheckSubGroup='User Databases Configuration'
	UNION
	SELECT 17,'</table>' HTMLValue
	UNION
	SELECT 18,'
	<br><h4>Auto-Growth </h4>
	<p>
	</p>
	<table class="table table-bordered">' HTMLValue
	UNION
	SELECT 19,
		'<tr '+CASE WHEN Type=0 THEN 'class="table-info"' WHEN Type=1 THEN 'class="table-success"' WHEN Type=2 THEN 'class="table-warning"' WHEN Type=3 THEN 'class="table-danger"' END+'><td>'+DatabaseName+'</td><td>'+REPLACE(Details,',','<br>')+'</td></tr>'
		  AS HTMLValue
	FROM ##uns_DailyChecker
	WHERE CheckGroup='Auto-Growth'
	UNION
	SELECT 20,'</table>' HTMLValue
	UNION
	SELECT 21,'
	<br><h4>Virtual Log File</h4>
	<p>SQL Server Transaction Log dosyaları birden fazla Virtual LogFile''lardan oluşmaktadır. Bu dosyaların fazla olması SQL Server''ın ya da servislerinin restart olması durumundaveritabanları daha geç ayağa kalkmakta ve Log backup alma , restore etme işlemlerinin uzun sürmesine neden olmaktadır. VLF dosyalarının Veritabanı yöneticilerinin kontrolünde büyümelerini sağlaması için File''ların Initial Size, AutoGrowth / MaxSize ayarlarını yapılandırmaları gerekmektedir. VLF count bilgileri DBCC LOGINFO() komutu ile kontrol edilebilmektedir.                 

	<br><mark>Virtual Log File sayıları 1000’den büyük olan veritabanlarına müdahale edilerek değerler küçültülmelidir.</mark><br>

	</p>
	<table class="table table-bordered">' HTMLValue
	UNION
	SELECT 22,
		'<tr '+CASE WHEN Type=0 THEN 'class="table-info"' WHEN Type=1 THEN 'class="table-success"' WHEN Type=2 THEN 'class="table-warning"' WHEN Type=3 THEN 'class="table-danger"' END+'><td>'+DatabaseName+'</td><td>'+REPLACE(Details,',','<br>')+'</td></tr>'
		  AS HTMLValue
	FROM ##uns_DailyChecker
	WHERE CheckGroup='Virtual Log File'
	UNION
	SELECT 23,'</table>' HTMLValue
	UNION
	SELECT 24,'
	<br><h4>Memory</h4>
	<p>
	</p>
	<table class="table table-bordered">' HTMLValue
	UNION
	SELECT 25,
		'<tr '+CASE WHEN Type=0 THEN 'class="table-info"' WHEN Type=1 THEN 'class="table-success"' WHEN Type=2 THEN 'class="table-warning"' WHEN Type=3 THEN 'class="table-danger"' END+'><td>'+CheckSubGroup+'</td><td>'+REPLACE(Details,',','<br>')+'</td></tr>'
		  AS HTMLValue
	FROM ##uns_DailyChecker
	WHERE CheckGroup='Memory'
	UNION
	SELECT 26,'</table>' HTMLValue
	UNION
	SELECT 27,'
	<br><h4>Disk Size</h4>
	<p>Disklerin doluluk oranlarını kontrol ettiğimiz bu kısımdaki değerlerimiz; 
	<br><mark>Free Space < %5 </mark> : Acil müdahale gerekmektedir.
	<br><mark>Free Space BETWEEN %5 AND %20 </mark> : Kontrol edilip, disk eklenmeli veya gereksiz dosyalar taşınmalı/silinmelidir.
	<br><mark>Free Space > %20 </mark> : Disklerde yeterli yer olduğundan müdahale gerekmemektedir.
	</p>
	<table class="table table-bordered">' HTMLValue
	UNION
	SELECT 28,
		'<tr '+CASE WHEN Type=0 THEN 'class="table-info"' WHEN Type=1 THEN 'class="table-success"' WHEN Type=2 THEN 'class="table-warning"' WHEN Type=3 THEN 'class="table-danger"' END+'><td>'+CheckSubGroup+'</td><td>'+REPLACE(Details,',','<br>')+'</td></tr>'
		  AS HTMLValue
	FROM ##uns_DailyChecker
	WHERE CheckGroup='Disk Size'
	UNION
	SELECT 29,'</table>' HTMLValue
	UNION
	SELECT 30,'
	<br><h4>Disk Latency</h4>
	<p>Disk gecikme oranlarını kontrol ettiğimiz bu kısımdaki değerlerimiz;
	<br>Latency 100 üzeri olduğu durumlarda, veritabanı üzerindeki sorgular, indeksler vs. incelenmeli ve gerekli önlemler alınmalıdır.
	<br>Latency 50 ile 100 arasında ise, kabul edilebilir bir değer olmasına rağmen sorgu, indeks vs. incelemesi gerekmektedir.
	<br> Latency 50''nin altında olduğu durumlarda, disk performansı sağlıklı olarak kabul edilmektedir.
	</p>
	<table class="table table-bordered">' HTMLValue
	UNION
	SELECT 31,
		'<tr '+CASE WHEN Type=0 THEN 'class="table-info"' WHEN Type=1 THEN 'class="table-success"' WHEN Type=2 THEN 'class="table-warning"' WHEN Type=3 THEN 'class="table-danger"' END+'><td>'+CheckSubGroup+'</td><td>'+REPLACE(Details,',','<br>')+'</td></tr>'
		  AS HTMLValue
	FROM ##uns_DailyChecker
	WHERE CheckGroup='Disk Latency'
	UNION
	SELECT 32,'</table>' HTMLValue


	--Araya bişeyler gelebilir..

	UNION
	SELECT 33,'
	<br><h4>Index - Fill Factor Kontrolleri</h4>
	<p>Page''lerdeki boşluk oranlarının ayarlanması SQL Server Instance seviyesi dışında Index''ler üzerinden de ayarlanabilmektedir. Page''lerde Fill Factor seviyesi ayarlanması Index''lerin Fragmante olmasını geciktirir. Bu kısımda Fill Factor 0 ile 80 arasında olan Index''leri kontrol etmekteyiz.
	</p>
	<table class="table table-bordered">' HTMLValue
	UNION
	SELECT 34,
		'<tr '+CASE WHEN Type=0 THEN 'class="table-info"' WHEN Type=1 THEN 'class="table-success"' WHEN Type=2 THEN 'class="table-warning"' WHEN Type=3 THEN 'class="table-danger"' END+'><td>'+DatabaseName+'</td><td>'+REPLACE(Details,',','<br>')+'</td></tr>'
		  AS HTMLValue
	FROM ##uns_DailyChecker
	WHERE CheckGroup='Index Definition' AND CheckSubGroup='Fill Factor'
	UNION
	SELECT 35,'</table>' HTMLValue

	UNION
	SELECT 36,'
	<br><h4>Index - Heap Table Kontrolleri</h4>
	<p>SQL Server’da sıralı olmayan ve clustered indeks atılmamış tablolara HEAP TABLE denilmektedir. Bu tablolara sorguların çekilmesinde performans olarak kayıplara neden olma ihtimali bulunmasından dolayı bu tablolar tespit edilip indeks atılıp atılmayacağına karar verilmelidir.
	</p>
	<table class="table table-bordered">' HTMLValue
	UNION
	SELECT 37,
		'<tr '+CASE WHEN Type=0 THEN 'class="table-info"' WHEN Type=1 THEN 'class="table-success"' WHEN Type=2 THEN 'class="table-warning"' WHEN Type=3 THEN 'class="table-danger"' END+'><td>'+DatabaseName+'</td><td>'+REPLACE(Details,',','<br>')+'</td></tr>'
		  AS HTMLValue
	FROM ##uns_DailyChecker
	WHERE CheckGroup='Index Definition' AND CheckSubGroup='Heap Table'
	UNION
	SELECT 38,'</table>' HTMLValue
	UNION
	SELECT 39,'
	<br><h4>Backup Kontrolleri</h4>
	<p>Veri tabanları kurumlar için kritik verilerinin olduğu ve kullanılan sistemlerin veri tabanları ile çalışması sebebi ile yedekleme planlarının olması hayati önem arz etmektedir. Yapılan yedekleme planlarının çalışıp çalışmadığı kontrolleri ve yedekleme planlarının Best Practice’lere göre oluşturup oluşturulmadığı kontrol edilmektedir. 
	</p>
	<table class="table table-bordered">' HTMLValue
	UNION
	SELECT 40,
		'<tr '+CASE WHEN Type=0 THEN 'class="table-info"' WHEN Type=1 THEN 'class="table-success"' WHEN Type=2 THEN 'class="table-warning"' WHEN Type=3 THEN 'class="table-danger"' END+'><td>'+DatabaseName+'</td><td>'+REPLACE(Details,',','<br>')+'</td></tr>'
		  AS HTMLValue
	FROM ##uns_DailyChecker
	WHERE CheckGroup='Backup' 
	UNION
	SELECT 41,'</table>' HTMLValue
	UNION
	SELECT 42,'
	<br><h4>Data Corruption</h4>
	<p>Veritabanlarında [msdb].[dbo].[suspect_pages] üzerine kayıt edilmiş bozuk sayfa olup olmadığı kontrol edilmektedir.
	</p>
	<table class="table table-bordered">' HTMLValue
	UNION
	SELECT 43,
		'<tr '+CASE WHEN Type=0 THEN 'class="table-info"' WHEN Type=1 THEN 'class="table-success"' WHEN Type=2 THEN 'class="table-warning"' WHEN Type=3 THEN 'class="table-danger"' END+'><td>'+CheckSubGroup+'</td><td>'+REPLACE(Details,',','<br>')+'</td></tr>'
		  AS HTMLValue
	FROM ##uns_DailyChecker
	WHERE CheckGroup='Data Corruption' 
	UNION
	SELECT 44,'</table>' HTMLValue
	UNION
	SELECT 45,'
	<br><h4>Performans Counters</h4>
	<p>Kontrollerimiz sırasında ortalama SQL Server Performans sayaçları değerleridir.
	<br><b>Active Temp Tables </b>: tempdb üzerinde kullanılan aktif tablo sayısını göstermektedir.
	<br><b>Average Wait Time (ms) </b>: Ortalama bekleme süresini göstermektedir.                                                                                                       
	<br><b>Buffer cache hit ratio </b>: Araballekten okunan page sayısını yüzde olarak göstermektedir.
	<br><b>Free Memory (KB) </b>: Sunucu üzerinde kullanılmayan memory miktarını göstermektedir.
	<br><b>Memory Grants Pending </b>: Memory üzerindeki bekleyen isteklerin sayısını göstermektedir 0 veya 0''a yakın olması iyi olduğunu göstermektedir.
	<br><b>Page life expectancy </b>: Page''lerin memory üzerinde tutulduğu süreyi saniye cinsinden belirten değerdir. Minimum 300 (5dk) olması önerilmektedir. Yüksek olması performansın iyi yönde olduğunu göstermektedir.
	<br><b>Target Server Memory (KB) </b>: SQL Server''ın ihtiyacı olduğu memory miktarını göstermektedir.
	<br><b>Total Server Memory (KB)</b>: SQL Server''ın allocate ettiğigi memory''i göstermektedir.
	<br><b>User Connections </b>: Her dakika SQL Server üzerinde login olan kullanıcı sayısı bilgisini göstermektedir.
	<br><b>AVG CPU Values (Last 256 Min) </b>: Sunucu üzerinde SQL servis tarafından kullanılan CPU değerlerini göstermektedir.
	</p>
	<table class="table table-bordered">' HTMLValue
	UNION
	SELECT 46,
		'<tr '+CASE WHEN Type=0 THEN 'class="table-info"' WHEN Type=1 THEN 'class="table-success"' WHEN Type=2 THEN 'class="table-warning"' WHEN Type=3 THEN 'class="table-danger"' END+'><td>'+CheckSubGroup+'</td><td>'+REPLACE(Details,',','<br>')+'</td></tr>'
		  AS HTMLValue
	FROM ##uns_DailyChecker
	WHERE CheckGroup IN ('Counters','CPU')
	UNION
	SELECT 47,'</table>' HTMLValue



	UNION
	SELECT 48,'
	<br><h4>Deadlock</h4>
	<p>SQL Server üzerinde deadlock olup olmadığı kontrol edilmektedir. Eğer var ise sebep olan işlemler bulunup kontrol edilmelidir.
	</p>
	<table class="table table-bordered">' HTMLValue
	UNION
	SELECT 49,
		'<tr '+CASE WHEN Type=0 THEN 'class="table-info"' WHEN Type=1 THEN 'class="table-success"' WHEN Type=2 THEN 'class="table-warning"' WHEN Type=3 THEN 'class="table-danger"' END+'><td>'+CheckSubGroup+'</td><td>'+REPLACE(Details,',','<br>')+'</td></tr>'
		  AS HTMLValue
	FROM ##uns_DailyChecker
	WHERE CheckGroup='Lock Info' 
	UNION
	SELECT 50,'</table>' HTMLValue
	UNION
	SELECT 51,'
	<br><h4>sysadmin</h4>
	<p>SQL Server üzerinde bulunan sysadmin sayısı gözlemlenmektedir. sysadmin yetkisine sahip kullanıcılar gözden geçirilmelidir.
	</p>
	<table class="table table-bordered">' HTMLValue
	UNION
	SELECT 52,
		'<tr '+CASE WHEN Type=0 THEN 'class="table-info"' WHEN Type=1 THEN 'class="table-success"' WHEN Type=2 THEN 'class="table-warning"' WHEN Type=3 THEN 'class="table-danger"' END+'><td>'+CheckSubGroup+'</td><td>'+Details+'</td></tr>'
		  AS HTMLValue
	FROM ##uns_DailyChecker
	WHERE CheckGroup='sysadmin' 
	UNION
	SELECT 53,'</table>' HTMLValue

	

	IF (SELECT COUNT(1) FROM ##uns_DailyChecker WHERE CheckGroup='Server Configuration' AND CheckSubGroup='Non-Default')>0
	BEGIN
	INSERT INTO #uns_ResultHTML (Ordernaryus,HTMLValue)
	SELECT 6,'
	<br><h4>SQL Server Konfigürasyonu - Varsayılan Dışındakiler </h4>
	<p> Aşağıdaki SQL Server ayarları varsayılan ayarlardan farklı olduğu gözlemlenmiştir. Ayarların kontrol edilmesi gerekmektedir.</p>
	<table class="table table-bordered">' HTMLValue
	UNION
	SELECT 7,
		'<tr '+CASE WHEN Type=0 THEN 'class="table-info"' WHEN Type=1 THEN 'class="table-success"' WHEN Type=2 THEN 'class="table-warning"' WHEN Type=3 THEN 'class="table-danger"' END+'><td>'+Details+'</td></tr>'
		  AS HTMLValue
	FROM ##uns_DailyChecker
	WHERE CheckGroup='Server Configuration' AND CheckSubGroup='Non-Default'
	UNION
	SELECT 8,'</table>' HTMLValue
	END

	IF (SELECT COUNT(1) FROM ##uns_DailyChecker WHERE CheckGroup='Always On')>0
	BEGIN
	INSERT INTO #uns_ResultHTML (Ordernaryus,HTMLValue)
	SELECT 100,'
	<br><h4>Always On</h4>
	<p>AlwaysOn durumları gözlemlenmektedir. Son aktarım tarihinden 30 dakika geçmiş, aktarılacak kayıt sayısı (Queue Size) 1000''den fazla olup olmadığı kontrol edilmektedir.
	</p>
	<table class="table table-bordered">' HTMLValue
	UNION
	SELECT 101,
		'<tr '+CASE WHEN Type=0 THEN 'class="table-info"' WHEN Type=1 THEN 'class="table-success"' WHEN Type=2 THEN 'class="table-warning"' WHEN Type=3 THEN 'class="table-danger"' END+'><td>'+DatabaseName+'</td><td>'+REPLACE(Details,',','<br>')+'</td></tr>'
		  AS HTMLValue
	FROM ##uns_DailyChecker
	WHERE CheckGroup='Always On' 
	UNION
	SELECT 102,'</table>' HTMLValue
	END

	INSERT INTO #uns_ResultHTML (Ordernaryus,HTMLValue)
	SELECT 9999 Priority,'<br></div></body></html>'  AS HTMLValue

SELECT HTMLValue FROM #uns_ResultHTML  ORDER BY Ordernaryus 

END


SELECT Priority,CheckGroup,CheckSubGroup,DatabaseName,Details,Details2,Comment,Type,CreateTSQL,DropTSQL,DefinitionTSQL FROM ##uns_DailyChecker
ORDER BY Priority,CheckGroup,CheckSubGroup

IF OBJECT_ID('tempdb..##uns_DailyChecker') IS NOT NULL DROP TABLE ##uns_DailyChecker;
